---
import { capitalize } from "../../utils/utils";

const { currentPath } = Astro.props;
console.log("breadcrumb currentPath:", currentPath);
// const getBreadcrumbs = (path: string) => {
//   if (typeof path !== "string") {
//     console.error("currentPath is not a string:", currentPath);
//     return [];
//   }

//   // if (path.endsWith("/")) splitPath.pop(); // remove last element if path has a trailing '/'
//   // let breadcrumbs = [];

//   // while (splitPath.length > 0) {
//   //   // stop until where the first path preceeding the trailing '/' at index 1 i.e ['', 'first_path', 'second_path' , ...]
//   //   splitPath.pop();
//   //   breadcrumbs.push(splitPath.join("/"));
//   //   console.log(breadcrumbs)
//   }

//   return breadcrumbs;
// };
const breadcrumbs: string[] =
  currentPath === "/"
    ? ["/"]
    : currentPath
        .split("/")
        .reduce(
          (acc: string[], cur: string, index: number) => [
            ...acc,
            `${acc[index]}${index ? "/" : ""}${decodeURIComponent(cur)}`,
          ],
          [""],
        )
        .slice(1);

// const breadcrumbs = getBreadcrumbs(currentPath as string).reverse();
console.log(breadcrumbs);
---

<div class="breadcrumbs">
  <!-- <span><a href="/">Home</a> {">"}</span> -->
  {
    breadcrumbs &&
      breadcrumbs.map((breadcrumb, index, array) => {
        if (index > 0) {
          return (
            <span>
              <a
                class={`hl-on-hover ${index + 1 === array.length ? "current" : ""}`}
                href={breadcrumb}
              >
                {capitalize(breadcrumb.split("/").pop() as string)}
              </a>{" "}
              {/* {index < array.length - 1 && ">"}{" "} */}
            </span>
          );
        } else {
          return (
            <span>
              <a
                class={`hl-on-hover ${index + 1 === array.length ? "current" : ""}`}
                href="/"
              >
                Home
              </a>
              {/* {array.length > 1 && ">"} */}
            </span>
          );
        }
      })
  }
</div>
<style lang="scss">
  @import "../../styles/utils/_variables";
  div.breadcrumbs {
    display: flex;
    margin: 0.25em auto;
    padding-left: 0.75em;
    /* justify-content: center; */
    align-content: center;
    max-width: 700px;
  }
  a {
    white-space: nowrap;
    // border-bottom: 1px solid lightslategray;
    padding: 0.25em calc(0.25em + 1ch);
    margin-right: -0.75ch;
    clip-path: polygon(
      0% 0%,
      calc(100% - 1ch) 0%,
      100% 50%,
      calc(100% - 1ch) 100%,
      0% 100%,
      1ch 50%
    );
    &:nth-child(odd) {
      background-color: darken(map-get($colors, 'light'),20%);
    }
    &.current {
      background-color: lightslategray;
      color: white;
      /* border-radius: 0 25em 25em 0; */
    }
  }
</style>
